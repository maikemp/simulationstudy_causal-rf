#! python
import json

sim_param = json.load(open('src/model_specs/simulation_parameters.json'), encoding='utf-8')
repetitions = [str(par) for par in range(sim_param['rep_number'])]
n_list = [str(par) for par in sim_param['n_list']]
n_test = str(sim_param["n_test_points"])

def build(ctx):

    for method in sim_param["list_of_methods"]:
        for setup_name in sim_param["list_of_setups"]:
            for n in n_list:
                    for rep_number in repetitions:

                        deplist = [
                            '../../project_paths.r',
                            ctx.path_to(ctx, 'IN_MODEL_SPECS', '{}.json'.format(setup_name)),
                            ctx.path_to(ctx, 'OUT_DATA_' + setup_name.upper(), 'sample_{}_n={}_rep_test.json'.format(setup_name, n_test)),
                            ctx.path_to(
                                ctx, 'OUT_DATA_' + setup_name.upper(), 'sample_{}_n={}_rep_{}.json'.format(setup_name, n, rep_number)
                                )
                        ]

                        # Define dependencies that are specific to one method.
                        if method == 'forest':
                            deplist.extend([
                                ctx.path_to(ctx, 'IN_MODEL_CODE', 'sample_size_functions.R'),
                                ctx.path_to(ctx, 'IN_MODEL_CODE', 'n_tree_functions.R')
                            ])

                        ctx(
                            features='run_r_script',
                            source='estimate_' + method + '.R',
        
                            deps=deplist,
                            target=[
                                ctx.path_to(
                                    ctx, 'OUT_ANALYSIS_'+method.upper(), method+'_data_{}_n={}_rep_{}.json'.format(setup_name,n,rep_number)
                                )
                            ],
                            append=[n_test, setup_name, n, rep_number],
                            name='get_{}_data_{}_{}_{}'.format(method, setup_name, n, rep_number)
                            )


    
    for model in 'baseline', 'max_moves_2':

        # Illustrate use of run_py_script with automatic model specification.
        ctx(
            features='run_py_script',
            source='schelling.py',
            deps=[
                ctx.path_to(ctx, 'OUT_DATA', 'initial_locations.csv'),
                ctx.path_to(ctx, 'IN_MODEL_CODE', 'agent.py'),
                ctx.path_to(ctx, 'IN_MODEL_SPECS', '{}.json'.format(model))
            ],
            target=[
                ctx.path_to(ctx, 'OUT_ANALYSIS', 'schelling_{}.pickle'.format(model)),
                ctx.path_to(ctx, 'OUT_ANALYSIS', 'log', 'schelling_{}.log'.format(model))
            ],
            append=model,
            name='schelling_{}'.format(model)
        )
