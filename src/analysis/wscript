#! python


import json


sim_param = json.load(
    open('src/model_specs/simulation_parameters.json'), encoding='utf-8'
)
repetitions = [str(par) for par in range(sim_param['rep_number'])]
d_list = [str(par) for par in sim_param['d_list']]


def build(ctx):

    for method in sim_param["list_of_methods"]:

        for setup_name in sim_param["list_of_setups"]:

            for d in d_list:

                for rep_number in repetitions:

                    deplist = [
                        '../../project_paths.r',
                        ctx.path_to(
                            ctx,
                            'IN_MODEL_SPECS',
                            '{}_analysis.json'.format(setup_name)
                        ),
                        ctx.path_to(
                            ctx,
                            'OUT_DATA_' + setup_name.upper(),
                            'sample_{}_d={}_rep_test.json'.format(
                                setup_name, d)
                        ),
                        ctx.path_to(
                            ctx,
                            'OUT_DATA_' + setup_name.upper(),
                            'sample_{}_d={}_rep_{}.json'.format(
                                setup_name, d, rep_number)
                        )
                    ]

                    targetlist = [
                        ctx.path_to(
                            ctx, 'OUT_ANALYSIS_'+method.upper(), method +
                            '_data_{}_d={}_rep_{}.json'.format(
                                setup_name, d, rep_number)
                        )
                    ]

                    # Define dependencies that are specific to the crf method.
                    if method == 'crf':
                        setup = json.load(
                            open('src/model_specs/{}_analysis.json'.format(setup_name))
                        )

                        if str(setup['sample_size_function']).isnumeric() == False:
                            deplist.extend(
                                [ctx.path_to(
                                    ctx,
                                    'IN_MODEL_CODE',
                                    'sample_size_functions.R'
                                )]
                            )

                        if str(setup['n_tree_function']).isnumeric() == False:
                            deplist.extend(
                                [ctx.path_to(ctx, 'IN_MODEL_CODE',
                                             'n_tree_functions.R')]
                            )

                        # Only for first repetition number, micro data is saved.
                        if rep_number == '0':
                            targetlist.extend([
                                ctx.path_to(
                                    ctx,
                                    'OUT_ANALYSIS_CRF',
                                    'crf_data_{}_d={}_micro_data.json'.format(
                                        setup_name, d)
                                )
                            ])

                    # Define dependencies that are specific to the knn method.
                    if method == 'knn':
                        deplist.extend([
                            ctx.path_to(ctx, 'IN_MODEL_SPECS', 'k_list.json')
                        ])

                    ctx(
                        features='run_r_script',
                        source='estimate_' + method + '.R',
                        deps=deplist,
                        target=targetlist,
                        append=[setup_name, d, rep_number],
                        name='get_{}_data_{}_{}_{}'.format(
                            method, setup_name, d, rep_number
                        )
                    )

    # Create one large dependency list for including all the before produced
    # data snippets and project paths and .
    dep_list = [
        '../../project_paths.r',
        ctx.path_to(ctx, 'IN_MODEL_SPECS', 'simulation_parameters.json')
    ]

    for method in sim_param["list_of_methods"]:

        for setup_name in sim_param["list_of_setups"]:

            for d in d_list:

                for rep_number in repetitions:

                    dep_list.extend([
                        ctx.path_to(
                            ctx, 'OUT_ANALYSIS_'+method.upper(), method +
                            '_data_{}_d={}_rep_{}.json'.format(
                                setup_name, d, rep_number)
                        )
                    ])

    ctx(
        features='run_r_script',
        source='stack_data.R',
        deps=dep_list,
        target=ctx.path_to(ctx, 'OUT_ANALYSIS', 'full_analysis_data.csv'),
        name='stack_data'
    )

