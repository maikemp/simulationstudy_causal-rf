#! python
import json

sim_param = json.load(open('src/model_specs/simulation_parameters.json'), encoding='utf-8')
list_of_setups = sim_param["list_of_setups"]

def build(ctx):

    for setup in list_of_setups:
        ctx(
            features='run_r_script',
            source='coverage_tables.R',
            deps=[
                ctx.path_to(ctx, 'OUT_ANALYSIS', 'full_analysis_data.csv'),
                ctx.path_to(ctx, 'IN_MODEL_SPECS', 'simulation_parameters.json'),
                ctx.path_to(ctx, 'IN_MODEL_SPECS', 'k_list.json'),
            ],
            target=ctx.path_to(ctx, 'OUT_TABLES', 'coverage_table_{}.tex'.format(setup)),
            append=setup,
            name='make_coverage_table_{}'.format(setup)
        )


    for model in 'baseline', 'max_moves_2':

        ctx(
            features='run_py_script',
            source='plot_locations.py',
            deps=[
                ctx.path_to(ctx, 'OUT_ANALYSIS', 'schelling_{}.pickle'.format(model)),
                ctx.path_to(ctx, 'IN_MODEL_SPECS', '{}.json'.format(model))
            ],
            target=ctx.path_to(ctx, 'OUT_FIGURES', 'schelling_{}.png'.format(model)),
            append=model,
            name='plot_locations_{}'.format(model)
        )


    # from src.final.project_dependency_graph import make_project_dependency_graph

    # ctx.add_post_fun(make_project_dependency_graph)
